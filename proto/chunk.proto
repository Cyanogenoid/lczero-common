/*
  This file is part of Leela Chess Zero.
  Copyright (C) 2018 The LCZero Authors

  Leela Chess is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Leela Chess is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Leela Chess.  If not, see <http://www.gnu.org/licenses/>.

  Additional permission under GNU GPL version 3 section 7

  If you modify this Program, or any covered work, by linking or
  combining it with NVIDIA Corporation's libraries from the NVIDIA CUDA
  Toolkit and the NVIDIA CUDA Deep Neural Network library (or a
  modified version of those libraries), containing parts covered by the
  terms of the respective license agreement, the licensors of this
  Program grant you additional permission to convey the resulting work.
*/
syntax = "proto2";

import "proto/net.proto";

package pblczero;

message State {
  optional fixed64 our_pawns = 1;
  optional fixed64 our_knights = 2;
  optional fixed64 our_bishops = 3;
  optional fixed64 our_rooks = 4;
  optional fixed64 our_queens = 5;
  optional fixed64 our_king = 6;
  optional fixed64 their_pawns = 7;
  optional fixed64 their_knights = 8;
  optional fixed64 their_bishops = 9;
  optional fixed64 their_rooks = 10;
  optional fixed64 their_queens = 11;
  optional fixed64 their_king = 12;
  optional uint32 repetitions = 13;
  optional uint32 us_ooo = 14;
  optional uint32 us_oo = 15;
  optional uint32 them_ooo = 16;
  optional uint32 them_oo = 17;
  optional uint32 side_to_move = 18;
  optional uint32 rule_50 = 19;
}

message Policy {
  repeated uint32 index = 1 [packed=true];
  repeated float prior = 2 [packed=true];
}

message Game {
  enum Result {
    WHITE = 0;
    BLACK = 1;
    DRAW = 2;
  }

  repeated State state = 1;
  repeated Policy policy = 2;
  repeated float value = 3 [packed=true];
  repeated uint32 move = 4 [packed=true];
  optional Result result = 5;
}

message Chunk {
  optional fixed32 magic = 1;
  optional string license = 2;
  optional EngineVersion version = 3;
  repeated Game game = 4;
}
